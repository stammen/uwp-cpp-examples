<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="SwapChainPanel.Scenario1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SwapChainPanel"
    xmlns:common="using:UWPSwapChainPanel.Common"
    xmlns:renderer="using:DirectXPanels"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <StackPanel>
                <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                    SwapChainPanel enables seamless composition of DirectX surfaces and XAML content by associating a DirectX swap chain with a XAML control, and
                    is ideal for applications that include frequently updated DirectX content or drawing in response to user input at high frame rates.
                    SwapChainPanel supports standard XAML layout and properties such as height, width, render transforms, opacity, and child elements.
                </TextBlock>
                <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" Margin="0,10,0,0">
                    The spinning cube on the left is rendered in a SwapChainPanel using Direct3D.
                    The spinning cube on the right is identical, except it is rotated, semi-transparent, and composed with other XAML elements.
                </TextBlock>
            </StackPanel>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputFullScreenLandscape"/>
                    <VisualState x:Name="InputFilled"/>
                    <VisualState x:Name="InputFullScreenPortrait"/>
                    <VisualState x:Name="InputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!-- A SwapChainPanel that renders a 3D cube -->
            <renderer:D3DPanel x:Name="DirectXPanel1" Height="300" Width="300" />

            <Grid Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">
                <Rectangle Width="200" Height="200" Fill="Orange" VerticalAlignment="Top" HorizontalAlignment="Left" />

                <!-- A SwapChainPanel that renders a 3D cube, with various XAML properties applied -->
                <renderer:D3DPanel x:Name="DirectXPanel2" Height="300" Width="300" Opacity="0.75">
                    <renderer:D3DPanel.RenderTransform>
                        <CompositeTransform Rotation="25" />
                    </renderer:D3DPanel.RenderTransform>

                    <TextBlock Text="This is XAML text as a child of the SwapChainPanel" Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" />
                </renderer:D3DPanel>

                <TextBlock Text="This is XAML text overlaid on top of the SwapChainPanel" Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" VerticalAlignment="Bottom" />
            </Grid>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputFullScreenLandscape"/>
                    <VisualState x:Name="OutputFilled"/>
                    <VisualState x:Name="OutputFullScreenPortrait"/>
                    <VisualState x:Name="OutputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </Grid>
</common:LayoutAwarePage>
