<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="SwapChainPanel.Scenario4"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SwapChainPanel"
    xmlns:common="using:UWPSwapChainPanel.Common"
    xmlns:renderer="using:DirectXPanels"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

  <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid x:Name="Input" Grid.Row="0">
      <StackPanel>
        <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
          SwapChainPanel also supports transparent swap chains.  In this example a transparent swap chain is placed over XAML text, and the CompositeMode of
          the panel is set to MinBlend.  This enables a highlighter-like effect where the "darkest" color - the minimum of each color channel - is chosen for each pixel
          when the swap chain panel contents overlap with the text behind them.
        </TextBlock>
        <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" Margin="0,10,0,0">
          Start drawing on the transparent swap chain overlaid on the text below.  Note how the solid yellow DirectX content is blended with the XAML content behind it, ensuring the text quality is unaffected.
        </TextBlock>
      </StackPanel>
      <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup>
          <VisualState x:Name="InputFullScreenLandscape"/>
          <VisualState x:Name="InputFilled"/>
          <VisualState x:Name="InputFullScreenPortrait"/>
          <VisualState x:Name="InputSnapped"/>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Grid>

    <Grid x:Name="Output" Grid.Row="1">
      <Border x:Name="ParagraphBorder" BorderBrush="Black" BorderThickness="1">
        <TextBlock x:Name="ParagraphText" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}">
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas vitae metus massa, feugiat faucibus felis. Vestibulum vestibulum porta leo ut pellentesque. Curabitur lacinia ligula eget magna sollicitudin eu fermentum purus pretium. Suspendisse ornare, risus sed luctus ultricies, tortor nibh pharetra odio, ac aliquam tortor leo vitae nunc. Nulla elit mauris, gravida quis tincidunt in, dapibus sed elit. Donec metus leo, scelerisque vitae dapibus nec, ultrices non tellus. Quisque placerat aliquet elit, eget elementum nunc ornare vitae. Curabitur ut magna mi, vitae iaculis urna.
          Sed semper purus vitae leo dictum rutrum egestas purus porta. Suspendisse mauris arcu, fringilla a dapibus at, faucibus in arcu. Quisque nibh tortor, fermentum non eleifend vitae, dignissim in enim. Etiam eget nisi vitae est mollis aliquet. Vestibulum elit lacus, tristique id accumsan in, consectetur sit amet quam. Nam condimentum, nibh ac egestas vulputate, tortor sapien molestie elit, non euismod magna nisl sed leo. Vivamus est lacus, molestie sit amet semper eu, tristique sit amet lacus. In quis tristique justo.
          Aliquam ac arcu id dui eleifend blandit non sed eros. Duis gravida orci consectetur neque faucibus ut facilisis erat pellentesque. Nulla a libero est, in convallis risus. Curabitur velit neque, volutpat quis hendrerit ut, sollicitudin a felis. Cras pellentesque adipiscing ullamcorper. Etiam dapibus augue eget sem volutpat a gravida est pharetra. Vivamus id nunc quam. Phasellus dignissim tincidunt elementum. Fusce consequat orci vel enim auctor at consectetur lectus eleifend. Nullam facilisis, odio semper interdum congue, quam mi aliquam risus, ut tincidunt massa libero ac neque. In vestibulum fringilla sapien vitae auctor. Aenean aliquam arcu sit amet nibh cursus quis pretium augue tincidunt. Etiam tristique tellus in dolor porttitor consectetur. Nulla egestas commodo sapien, ut vehicula massa bibendum eu. Nullam sed justo urna, eget porttitor ligula. Nunc posuere euismod purus, in venenatis augue dictum fermentum.
        </TextBlock>
      </Border>

      <!-- A DirectX drawing surface placed on top of the TextBlock above. It uses MinBlend mode to create a highlighter effect with the text beneath it -->
      <renderer:HighlighterPanel x:Name="HighlighterPanel" VerticalAlignment="Top" CompositeMode="MinBlend" />

      <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup>
          <VisualState x:Name="OutputFullScreenLandscape"/>
          <VisualState x:Name="OutputFilled"/>
          <VisualState x:Name="OutputFullScreenPortrait"/>
          <VisualState x:Name="OutputSnapped"/>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
    </Grid>
  </Grid>
</common:LayoutAwarePage>
