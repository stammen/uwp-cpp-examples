<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="SwapChainPanel.Scenario2"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SwapChainPanel"
    xmlns:common="using:UWPSwapChainPanel.Common"
    xmlns:renderer="using:DirectXPanels"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <common:LayoutAwarePage.Resources>
        <local:ReverseBooleanConverter x:Key="PaletteIsEnabledConverter" />
    </common:LayoutAwarePage.Resources>

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <StackPanel>
                <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">                                        
                    SwapChainPanel also supports independently processing input and rendering DirectX content entirely on a background thread, which 
                    helps keep the UI thread unblocked to improve application responsiveness.
                </TextBlock>
                <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" Margin="0,10,0,0">
                    Start drawing on the SwapChainPanel surface below. It handles input and renders ink strokes using Direct2D on a background thread, 
                    and will also attempt to recognize handwriting. Handwriting recognition results are displayed in a XAML TextBlock which gets updated 
                    on the UI thread.
                </TextBlock>
            </StackPanel>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputFullScreenLandscape"/>
                    <VisualState x:Name="InputFilled"/>
                    <VisualState x:Name="InputFullScreenPortrait"/>
                    <VisualState x:Name="InputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,0,0,25">
                    <TextBlock Style="{StaticResource BasicTextStyle}" Text="Handwriting recognition results:" Margin="0,0,25,0" FontWeight="Bold" />
                    <!-- TextBlock where handwriting recognition results will be displayed -->
                    <TextBlock x:Name="RecognitionResultsTextBlock" Style="{StaticResource BasicTextStyle}" />
                </StackPanel>

                <Border BorderThickness="1" BorderBrush="Black" x:Name="DrawingPanelBorder">
                    <!-- SwapChainPanel-based ink renderer -->
                    <renderer:DrawingPanel x:Name="DrawingPanel"
                        VerticalAlignment="Top"
                        HorizontalAlignment="Center"
                        Height="300"
                        BrushColor="{Binding BrushColor}"
                        BrushSize="{Binding BrushSize}"
                        BrushFitsToCurve="{Binding BrushFitsToCurve}"
                        BrushIsEraser="{Binding BrushIsEraser}"
                        RecognitionResultsUpdated="DrawingPanel_RecognitionResultsUpdated" />
                </Border>

                <!-- Color palette and drawing controls -->
                <StackPanel x:Name="ResourcesPanel" Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Bottom">
                    <ToggleButton ToolTipService.ToolTip="Eraser" x:Name="EraserButton" IsChecked="{Binding BrushIsEraser, Mode=TwoWay}" Margin="0,0,10,0">
                        <TextBlock Margin="5,0,0,8" FontFamily="Segoe UI Symbol" Text="&#x2710;" FontSize="40" HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </ToggleButton>
                    <local:PaletteControl IsEnabled="{Binding BrushIsEraser, Converter={StaticResource PaletteIsEnabledConverter}}" />
                </StackPanel>

                <StackPanel x:Name="ButtonsPanel" Orientation="Horizontal" Margin="0,15,0,0" >
                    <Button Content="Save.." Click="SaveButton_Clicked" />
                    <Button Content="Load.." Click="LoadButton_Clicked" />
                    <Button Content="Replay.." Click="ReplayButton_Clicked" />
                </StackPanel>
            </StackPanel>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputFullScreenLandscape"/>
                    <VisualState x:Name="OutputFilled"/>
                    <VisualState x:Name="OutputFullScreenPortrait"/>
                    <VisualState x:Name="OutputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </Grid>
</common:LayoutAwarePage>
