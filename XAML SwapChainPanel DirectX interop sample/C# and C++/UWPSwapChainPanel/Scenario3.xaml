<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="SwapChainPanel.Scenario3"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SwapChainPanel"
    xmlns:common="using:UWPSwapChainPanel.Common"
    xmlns:renderer="using:DirectXPanels"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <StackPanel>
                <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                    The SwapChainPanel.CompositionScaleChanged event is raised whenever the rendered size of the panel has changed, for example due to a render 
                    transform being applied, or zooming in or out. This gives apps an opportunity to optionally resize the swap chain associated with the 
                    SwapChainPanel.  Updating the swap chain's size to match the total rendered size of the SwapChainPanel and re-rendering the DirectX content at the
                    new size will ensure any vector content is always crisp because it does not have to be scaled.
                </TextBlock>
                <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" Margin="0,10,0,0">
                    The version on the left shows a 100x100 image which has been scaled up by 3x using a render transform.  Note how the content is blurry.
                    In contrast, the 100x100 SwapChainPanel on the right updates its swap chain size whenever the scale is changed.  If you zoom in or out on the right SwapChainPanel,
                    note how the content is re-rendered at the new size after each zoom operation completes: this ensures the content is always crisp and doesn't have scaling artifacts.
                </TextBlock>
            </StackPanel>
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputFullScreenLandscape"/>
                    <VisualState x:Name="InputFilled"/>
                    <VisualState x:Name="InputFullScreenPortrait"/>
                    <VisualState x:Name="InputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!-- A 100x100 image scaled up by 3x to show the result of scaling -->            
            <Image Source="Assets/ScaledImage.png" Width="100" Height="100">
                <Image.RenderTransform>
                    <ScaleTransform ScaleX="3" ScaleY="3" CenterX="50" CenterY="50" />
                </Image.RenderTransform>
            </Image>

            <!-- A 100x100 SwapChainPanel in a zoomable ScrollViewer which updates its size based on the zoom factor -->
            <ScrollViewer ZoomMode="Enabled" MaxZoomFactor="20" HorizontalScrollMode="Enabled" HorizontalScrollBarVisibility="Visible" Grid.Column="1">
                <renderer:D2DPanel x:Name="DirectXPanel2" Height="100" Width="100" />
            </ScrollViewer>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputFullScreenLandscape"/>
                    <VisualState x:Name="OutputFilled"/>
                    <VisualState x:Name="OutputFullScreenPortrait"/>
                    <VisualState x:Name="OutputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </Grid>
</common:LayoutAwarePage>
